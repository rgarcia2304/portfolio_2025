{"ast":null,"code":"var _jsxFileName = \"/Users/rgarcia11/Desktop/portf/my-portfolio/src/components/Projects.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './Experience.css'; // create this file next\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Projects = () => {\n  _s();\n  const itemsRef = useRef([]);\n  useEffect(() => {\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        if (entry.isIntersecting) {\n          entry.target.classList.add('reveal');\n          observer.unobserve(entry.target); // one-time animation\n        }\n      });\n    }, {\n      threshold: 0.1\n    });\n    itemsRef.current.forEach(item => {\n      if (item) observer.observe(item);\n    });\n  }, []);\n  const experiences = [{\n    title: 'AI-Powered Sleep Recommendation System',\n    date: 'March 2025- Present',\n    description: 'Led the development of an AI-powered sleep recommendation system as the team’s lead software engineer, combining behavioral sleep science with modern NLP. Conducted research to extract evidence-based sleep guidelines and built a custom dataset to fine-tune Meta’s LLaMA 3.2 model using LoRA with Hugging Face’s transformers, peft, and PyTorch libraries. Integrated Retrieval-Augmented Generation (RAG) with FAISS to incorporate user history and enhance personalization. Developed a full-stack application with a FastAPI backend and React frontend, enabling real-time user input and recommendation delivery through a modular API-driven architecture '\n  }, {\n    title: 'Group-Payment App',\n    date: 'April 2025- Present',\n    description: 'Designed and developed a full-stack blockchain-based group payment app to solve the social pressure of deciding who pays the tab. Built with Solidity smart contracts to enable group formation, voting on a designated payer, and conditional fund disbursement only when a target contribution is reached. Integrated MetaMask for wallet authentication and transaction signing, ensuring secure, user-controlled payments. All transactions and voting records are immutably stored on the blockchain for transparency. The app is deployed using Next.js with a React frontend and a Web3-enabled backend, providing a seamless decentralized experience for collaborative group payments.'\n  }, {\n    title: 'Eterna | Reddit Filtering App',\n    date: 'February 2025- March 2025',\n    description: 'Built a full-stack product recommendation app that filters Reddit discussions to surface high-quality suggestions based on community feedback. Users enter a product-related query, which is processed through the Reddit Scraper API (via RapidAPI) to gather relevant posts. The results are then passed to the OpenAI GPT API using prompt-based filtering to eliminate non-product discussions and rank responses by helpfulness. Non-product or vague queries are also automatically filtered. Deployed with Firebase for real-time database storage and built using React, Next.js, and styled-components for a modern, responsive UI.'\n  }, {\n    title: 'Autonomous Vaccuum Cleaner',\n    date: 'February 2025- March 2025',\n    description: 'Developed an autonomous vacuum cleaning simulation using the ACT-R cognitive architecture in Python to model intelligent Roomba-like behavior. Implemented motor and visual module rules to execute swirling cleaning patterns and respond dynamically to collisions with debris or walls. Leveraged ACT-R’s visual processing to guide real-time decision-making and adaptive navigation in cluttered environments, simulating human-like perception and action in robotic cleaning tasks. Leveraged HDM to create intelligent recall of debris simulating real human memory accelerating map cleaning speed.'\n  }, {\n    title: 'Dynamic Memory Allocator',\n    date: 'February 2025- March 2025',\n    description: 'Designed and implemented a custom dynamic memory allocator in C, replicating core functionalities of malloc, realloc, and free to gain fine-grained control over memory management and performance. Constructed an explicit free list with boundary tagging, alignment handling, and coalescing logic to efficiently manage memory blocks. Optimized allocation strategy using the first-fit placement policy, demonstrating a deep understanding of low-level memory systems and allocator design.'\n  }, {\n    title: 'Flight Application',\n    date: 'August 2024- November 2024',\n    description: 'Independently designed and built a fully custom, microservice-based flight application from the ground up—no external APIs or tools used. Developed the Flight Creation microservice in Java using the Spring Framework, engineered the Booking system in C# with ASP.NET and MongoDB, and implemented the Payment microservice using GraphQL with Spring and MySQL. Constructed the entire backend architecture and frontend interface using React, managing all data flow, service communication, and storage logic manually to ensure full control and understanding of the system. This project showcases complete ownership over microservice design, API creation, and full-stack integration.'\n  }, {\n    title: '5 Stage Pipeline Processor',\n    date: 'October 2024- December 2024',\n    description: 'Designed and implemented a fully functional 5-stage pipelined CPU using Verilog, encompassing instruction fetch, decode, execute, memory access, and write-back stages. Built the processor from the ground up, optimizing performance by implementing hazard detection and handling mechanisms for both data and structural hazards. This project demonstrates a strong grasp of computer architecture, low-level digital design, and efficient pipeline control logic.'\n  }, {\n    title: 'Linear Device',\n    date: 'February 2024- May 2024',\n    description: 'Developed a custom networked MDADM system in C on Linux to remotely manage JBOD (Just a Bunch of Disks) devices over TCP using a self-designed client-server protocol. Implemented core operations such as mount, read, write, and unmount, with support for 1MB linear addressing and robust byte-level packet assembly and error-checking. Built a caching layer with an LRU replacement policy to optimize read/write latency and maximize cache hit rates. Ensured reliable data transmission by designing multi-call read/write logic to handle partial packets and maintain consistency across networked storage operations.'\n  }, {\n    title: 'Course Scheduler',\n    date: 'October 2023- December 2023',\n    description: 'Developed a Java-based course scheduler application using a layered architecture, separating concerns across user interface, business logic, and data access layers. Built an interactive GUI for scheduling classes, leveraging Object-Oriented Programming to map each course to its corresponding database table. Enhanced functionality by implementing SQL queries for efficient data retrieval and manipulation, enabling dynamic updates and interaction between the GUI and the backend database.'\n  }];\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"projects\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Projects\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timeline\",\n      children: projects.map((exp, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: el => itemsRef.current[i] = el,\n        className: \"timeline-item hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: exp.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"date\",\n          children: exp.date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: exp.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Projects, \"L4DpOnhkIk/Wfp0wZCNGCkrvYeE=\");\n_c = Projects;\nexport default Projects;\nvar _c;\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","Projects","_s","itemsRef","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","unobserve","threshold","current","item","observe","experiences","title","date","description","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","projects","map","exp","i","ref","el","_c","$RefreshReg$"],"sources":["/Users/rgarcia11/Desktop/portf/my-portfolio/src/components/Projects.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './Experience.css'; // create this file next\n\nconst Projects = () => {\n  const itemsRef = useRef([]);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            entry.target.classList.add('reveal');\n            observer.unobserve(entry.target); // one-time animation\n          }\n        });\n      },\n      { threshold: 0.1 }\n    );\n\n    itemsRef.current.forEach((item) => {\n      if (item) observer.observe(item);\n    });\n  }, []);\n\n  const experiences = [\n    {\n      title: 'AI-Powered Sleep Recommendation System',\n      date: 'March 2025- Present',\n      description:\n        'Led the development of an AI-powered sleep recommendation system as the team’s lead software engineer, combining behavioral sleep science with modern NLP. Conducted research to extract evidence-based sleep guidelines and built a custom dataset to fine-tune Meta’s LLaMA 3.2 model using LoRA with Hugging Face’s transformers, peft, and PyTorch libraries. Integrated Retrieval-Augmented Generation (RAG) with FAISS to incorporate user history and enhance personalization. Developed a full-stack application with a FastAPI backend and React frontend, enabling real-time user input and recommendation delivery through a modular API-driven architecture ',\n    },\n    {\n      title: 'Group-Payment App',\n      date: 'April 2025- Present',\n      description:\n        'Designed and developed a full-stack blockchain-based group payment app to solve the social pressure of deciding who pays the tab. Built with Solidity smart contracts to enable group formation, voting on a designated payer, and conditional fund disbursement only when a target contribution is reached. Integrated MetaMask for wallet authentication and transaction signing, ensuring secure, user-controlled payments. All transactions and voting records are immutably stored on the blockchain for transparency. The app is deployed using Next.js with a React frontend and a Web3-enabled backend, providing a seamless decentralized experience for collaborative group payments.',\n    },\n    {\n        title: 'Eterna | Reddit Filtering App',\n        date: 'February 2025- March 2025',\n        description:\n          'Built a full-stack product recommendation app that filters Reddit discussions to surface high-quality suggestions based on community feedback. Users enter a product-related query, which is processed through the Reddit Scraper API (via RapidAPI) to gather relevant posts. The results are then passed to the OpenAI GPT API using prompt-based filtering to eliminate non-product discussions and rank responses by helpfulness. Non-product or vague queries are also automatically filtered. Deployed with Firebase for real-time database storage and built using React, Next.js, and styled-components for a modern, responsive UI.',\n      },\n      {\n        title: 'Autonomous Vaccuum Cleaner',\n        date: 'February 2025- March 2025',\n        description:\n          'Developed an autonomous vacuum cleaning simulation using the ACT-R cognitive architecture in Python to model intelligent Roomba-like behavior. Implemented motor and visual module rules to execute swirling cleaning patterns and respond dynamically to collisions with debris or walls. Leveraged ACT-R’s visual processing to guide real-time decision-making and adaptive navigation in cluttered environments, simulating human-like perception and action in robotic cleaning tasks. Leveraged HDM to create intelligent recall of debris simulating real human memory accelerating map cleaning speed.',\n      },\n      {\n        title: 'Dynamic Memory Allocator',\n        date: 'February 2025- March 2025',\n        description:\n          'Designed and implemented a custom dynamic memory allocator in C, replicating core functionalities of malloc, realloc, and free to gain fine-grained control over memory management and performance. Constructed an explicit free list with boundary tagging, alignment handling, and coalescing logic to efficiently manage memory blocks. Optimized allocation strategy using the first-fit placement policy, demonstrating a deep understanding of low-level memory systems and allocator design.',\n      },\n      {\n        title: 'Flight Application',\n        date: 'August 2024- November 2024',\n        description:\n          'Independently designed and built a fully custom, microservice-based flight application from the ground up—no external APIs or tools used. Developed the Flight Creation microservice in Java using the Spring Framework, engineered the Booking system in C# with ASP.NET and MongoDB, and implemented the Payment microservice using GraphQL with Spring and MySQL. Constructed the entire backend architecture and frontend interface using React, managing all data flow, service communication, and storage logic manually to ensure full control and understanding of the system. This project showcases complete ownership over microservice design, API creation, and full-stack integration.',\n      },\n      {\n        title: '5 Stage Pipeline Processor',\n        date: 'October 2024- December 2024',\n        description:\n          'Designed and implemented a fully functional 5-stage pipelined CPU using Verilog, encompassing instruction fetch, decode, execute, memory access, and write-back stages. Built the processor from the ground up, optimizing performance by implementing hazard detection and handling mechanisms for both data and structural hazards. This project demonstrates a strong grasp of computer architecture, low-level digital design, and efficient pipeline control logic.',\n      },\n      {\n        title: 'Linear Device',\n        date: 'February 2024- May 2024',\n        description:\n          'Developed a custom networked MDADM system in C on Linux to remotely manage JBOD (Just a Bunch of Disks) devices over TCP using a self-designed client-server protocol. Implemented core operations such as mount, read, write, and unmount, with support for 1MB linear addressing and robust byte-level packet assembly and error-checking. Built a caching layer with an LRU replacement policy to optimize read/write latency and maximize cache hit rates. Ensured reliable data transmission by designing multi-call read/write logic to handle partial packets and maintain consistency across networked storage operations.',\n      },\n      {\n        title: 'Course Scheduler',\n        date: 'October 2023- December 2023',\n        description:\n          'Developed a Java-based course scheduler application using a layered architecture, separating concerns across user interface, business logic, and data access layers. Built an interactive GUI for scheduling classes, leveraging Object-Oriented Programming to map each course to its corresponding database table. Enhanced functionality by implementing SQL queries for efficient data retrieval and manipulation, enabling dynamic updates and interaction between the GUI and the backend database.',\n      },\n\n  ];\n\n  return (\n    <section id=\"projects\">\n      <h2>Projects</h2>\n      <div className=\"timeline\">\n        {projects.map((exp, i) => (\n          <div\n            key={i}\n            ref={(el) => (itemsRef.current[i] = el)}\n            className=\"timeline-item hidden\"\n          >\n            <h3>{exp.title}</h3>\n            <p className=\"date\">{exp.date}</p>\n            <p>{exp.description}</p>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n};\n\nexport default Projects;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}